#BlueJ class context
comment0.target=LinkedTitleListTest
comment0.text=\n\ JUnit-Test\ for\ the\ double\ linked\ list\n\ \n\ @author\ Orsini,\ Posdorfer\n\ @version\ 01/2018\n
comment1.params=
comment1.target=LinkedTitleListTest()
comment10.params=
comment10.target=void\ testAddingInvalidPosition()
comment10.text=\n\ tests\ the\ method\ add(title,int)\ with\ the\ list.\ escpecially\ if\ the\ list\n\ behaves\ correctly\ when\ adding\ elements\ at\ invalid\ positions.\n
comment11.params=
comment11.target=void\ testDeletingTitlesInMiddle()
comment11.text=\n\ tests\ the\ method\ delete(int).\ it\ will\ be\ tested\ if\ items\ can\ be\ deleted\ from\n\ the\ middle\ of\ the\ list.\n
comment12.params=
comment12.target=void\ testDeletingTitlesAtBeginning()
comment12.text=\n\ tests\ the\ method\ delete(int).\ it\ will\ be\ tested\ if\ items\ can\ be\ deleted\ from\n\ the\ beginning\ of\ the\ list.\n
comment13.params=
comment13.target=void\ testDeletingTitlesAtEnd()
comment13.text=\n\ tests\ the\ method\ delete(int).\ it\ will\ be\ tested\ if\ items\ can\ be\ deleted\ from\n\ the\ end\ of\ the\ list.\n
comment14.params=
comment14.target=void\ testDeletingFromLargeList()
comment14.text=\n\ test\ if\ items\ can\ be\ removed\ from\ lists,\ which\ are\ larger\ then\ 10\n
comment15.params=
comment15.target=void\ testDeletingAtInvalidPosition()
comment15.text=\n\ tests\ the\ method\ delete(int).\ it\ will\ be\ testet\ if\ the\ list\ behaves\ correctly\n\ when\ trying\ to\ delete\ items\ at\ invalid\ positions\n
comment16.params=
comment16.target=void\ testGetTitleAtMiddle()
comment16.text=\n\ tests\ the\ getTitle(int)\ method.\ testing\ if\ items\ can\ be\ retrieved\ from\ the\n\ middle\n
comment17.params=
comment17.target=void\ testGetTitleAtBeginning()
comment17.text=\n\ tests\ the\ getTitle(int)\ method.\ testing\ if\ items\ can\ be\ retrieved\ from\ the\n\ beginning\n
comment18.params=
comment18.target=void\ testGetTitleAtEnd()
comment18.text=\n\ tests\ the\ getTitle(int)\ method.\ testing\ if\ items\ can\ be\ retrieved\ from\ the\n\ end\n
comment19.params=
comment19.target=void\ testGetTitleAtInvalidPosition()
comment19.text=\n\ tests\ the\ getTitle(int)\ method.\ testing\ if\ the\ list\ behaves\ correclty\ when\n\ trying\ to\ retrieve\ elements\ from\ invalid\ positions\n
comment2.params=
comment2.target=void\ testContains()
comment2.text=\n\ tests\ the\ contains\ method\n
comment20.params=
comment20.target=void\ testClear()
comment20.text=\n\ test\ the\ clear()\ method\n
comment21.params=
comment21.target=void\ testEnlargingList()
comment21.text=\n\ Tests\ if\ the\ list\ corretly\ enlarges\ when\ adding\ multiple\ elements\n
comment22.params=
comment22.target=TitleList\ createList()
comment22.text=\n\ Erzeugt\ eine\ neue\ TitelListe.\n\ \n\ @return\ Eine\ leere\ Liste.\n
comment3.params=
comment3.target=void\ testListUsesEqualsForComparision()
comment3.text=\n\ Tests\ if\ the\ implementation\ compares\ Titles\ using\ equals\n
comment4.params=
comment4.target=void\ testGetLength()
comment4.text=\n\ Tests\ the\ getLength()\ method\ of\ the\ list\n
comment5.params=
comment5.target=void\ testAddingTitlesInMiddle()
comment5.text=\n\ tests\ the\ method\ add(title,int)\ with\ the\ list.\ it\ will\ especially\ be\ tested\n\ whether\ items\ can\ be\ added\ in\ the\ middle.\n
comment6.params=
comment6.target=void\ testAddingTitlesAtBeginning()
comment6.text=\n\ tests\ the\ method\ add(title,int)\ with\ the\ list.\ it\ will\ especially\ be\ tested\n\ wheter\ items\ can\ be\ added\ at\ the\ beginning\n
comment7.params=
comment7.target=void\ testAddingTitlesAtEnd()
comment7.text=\n\ tests\ the\ method\ add(title,int)\ with\ the\ list.\ it\ will\ especially\ be\ tested\n\ wheter\ items\ can\ be\ added\ at\ the\ end\n
comment8.params=
comment8.target=void\ testShiftingOfElements()
comment8.text=\n\ Tests\ that\ elements\ will\ be\ correctly\ shifted\ at\ the\ beginning\n
comment9.params=
comment9.target=void\ testGrowingOfList()
comment9.text=\n\ Tests\ the\ 'growing'\ of\ lists,\ when\ adding\ alot\ of\ elements\n
numComments=23
